#ifndef THREAD_H_
#define THREAD_H_

/*
int status; // 0x00
void *func; // 0x04
void *stack; // 0x08
int stack_size; // 0x0C
void *gp_reg; // 0x10 general purpose register?
int initial_priority; // 0x14
int current_priority; // 0x18
u32 attr; // 0x1C
u32 option; // 0x20 Do not use - officially documented to not work.
*/

// TODO: find out how aligned works, some thread stacks aligned 64?
static char default_stack[16*1024] __attribute__((aligned(16)));

int createThread(void * function);
int createThread(void * function, int priority);
int createThread(void * function, char stack[], int priority);
int createThread(void * function, char stack[], void * gp_register, int priority, u32 attr, u32 option);

int startThread(t_id);

void interuptThread(int t_id);
void join(int t_id);
void wait(int t_id);

static struct thread {
	ee_thread_t * thread;
	string name;

	priority
};

#endif /* THREAD_H_ */
